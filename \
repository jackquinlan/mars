from dataclasses import dataclass
from typing import Optional
from mars.bitboard import Bitboard
from mars.position import Position
from mars.utils import get_squares_from_bitboard
from mars import RANK_4, RANK_5


@dataclass(frozen=True)
class Move:
    start: int 
    end: int   
    promotion: Optional[str] = None # Q, R, B, or N

class MoveGen:
    def __init__(self):
        # Pre-compute attack sets
        # self._pre_compute_attack_sets()
        return
    
    def pseudo_legal_moves(self, position: Position) -> list[Move]:
        move_list = []

        pawn = self.pawn_moves(position)
        return []

    def pawn_moves(self, position: Position) -> list[Move]:
        moves: list[Move] = []
        board = position.board
        color = position.color
        direction = 8 if color == "w" else -8

        # Single and double pushes
        # TODO: Promotions
        if color == "w":
            single_pushes = board.piece_bitboard("P").shift_north() & board.empty()
        else:
            single_pushes = board.piece_bitboard("p").shift_south() & board.empty()

        for end in get_squares_from_bitboard(single_pushes):
            start = end - direction
            moves.append(Move(start=start, end=end))

        if color == "w":
            double_pushes = single_pushes.shift_north() & board.empty() & Bitboard(RANK_4)
        else:
            double_pushes = single_pushes.shift_south() & board.empty() & Bitboard(RANK_5)

        for end in get_squares_from_bitboard(double_pushes):
            start = end - 2 * direction
            moves.append(Move(start=start,end=end))

        # Captures 
        # En Passant
        print(len(moves), "pawn moves")
        return moves
    
